/**
 */
package ajiMLT.provider;

import ajiMLT.util.AjiMLTAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AjiMLTItemProviderAdapterFactory extends AjiMLTAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AjiMLTItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.FunctionalServiceT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionalServiceTItemProvider functionalServiceTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.FunctionalServiceT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionalServiceTAdapter() {
		if (functionalServiceTItemProvider == null) {
			functionalServiceTItemProvider = new FunctionalServiceTItemProvider(this);
		}

		return functionalServiceTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.DiscoveryServiceT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiscoveryServiceTItemProvider discoveryServiceTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.DiscoveryServiceT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiscoveryServiceTAdapter() {
		if (discoveryServiceTItemProvider == null) {
			discoveryServiceTItemProvider = new DiscoveryServiceTItemProvider(this);
		}

		return discoveryServiceTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.APIServiceT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APIServiceTItemProvider apiServiceTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.APIServiceT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPIServiceTAdapter() {
		if (apiServiceTItemProvider == null) {
			apiServiceTItemProvider = new APIServiceTItemProvider(this);
		}

		return apiServiceTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.ConfigurationServiceT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationServiceTItemProvider configurationServiceTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.ConfigurationServiceT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationServiceTAdapter() {
		if (configurationServiceTItemProvider == null) {
			configurationServiceTItemProvider = new ConfigurationServiceTItemProvider(this);
		}

		return configurationServiceTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.SecurityServiceT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityServiceTItemProvider securityServiceTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.SecurityServiceT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityServiceTAdapter() {
		if (securityServiceTItemProvider == null) {
			securityServiceTItemProvider = new SecurityServiceTItemProvider(this);
		}

		return securityServiceTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.ServiceInterfaceT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceInterfaceTItemProvider serviceInterfaceTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.ServiceInterfaceT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceInterfaceTAdapter() {
		if (serviceInterfaceTItemProvider == null) {
			serviceInterfaceTItemProvider = new ServiceInterfaceTItemProvider(this);
		}

		return serviceInterfaceTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.UserManagementServiceT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserManagementServiceTItemProvider userManagementServiceTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.UserManagementServiceT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserManagementServiceTAdapter() {
		if (userManagementServiceTItemProvider == null) {
			userManagementServiceTItemProvider = new UserManagementServiceTItemProvider(this);
		}

		return userManagementServiceTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.SystemT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemTItemProvider systemTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.SystemT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemTAdapter() {
		if (systemTItemProvider == null) {
			systemTItemProvider = new SystemTItemProvider(this);
		}

		return systemTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.DataModelT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataModelTItemProvider dataModelTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.DataModelT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataModelTAdapter() {
		if (dataModelTItemProvider == null) {
			dataModelTItemProvider = new DataModelTItemProvider(this);
		}

		return dataModelTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.EntityT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityTItemProvider entityTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.EntityT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityTAdapter() {
		if (entityTItemProvider == null) {
			entityTItemProvider = new EntityTItemProvider(this);
		}

		return entityTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.RelationT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationTItemProvider relationTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.RelationT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationTAdapter() {
		if (relationTItemProvider == null) {
			relationTItemProvider = new RelationTItemProvider(this);
		}

		return relationTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.CreateT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateTItemProvider createTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.CreateT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateTAdapter() {
		if (createTItemProvider == null) {
			createTItemProvider = new CreateTItemProvider(this);
		}

		return createTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.ReadT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReadTItemProvider readTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.ReadT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReadTAdapter() {
		if (readTItemProvider == null) {
			readTItemProvider = new ReadTItemProvider(this);
		}

		return readTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.UpdateT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateTItemProvider updateTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.UpdateT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateTAdapter() {
		if (updateTItemProvider == null) {
			updateTItemProvider = new UpdateTItemProvider(this);
		}

		return updateTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.DeleteT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteTItemProvider deleteTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.DeleteT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteTAdapter() {
		if (deleteTItemProvider == null) {
			deleteTItemProvider = new DeleteTItemProvider(this);
		}

		return deleteTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.MultiReadT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiReadTItemProvider multiReadTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.MultiReadT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiReadTAdapter() {
		if (multiReadTItemProvider == null) {
			multiReadTItemProvider = new MultiReadTItemProvider(this);
		}

		return multiReadTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.CustomT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomTItemProvider customTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.CustomT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomTAdapter() {
		if (customTItemProvider == null) {
			customTItemProvider = new CustomTItemProvider(this);
		}

		return customTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.IntegerT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerTItemProvider integerTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.IntegerT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerTAdapter() {
		if (integerTItemProvider == null) {
			integerTItemProvider = new IntegerTItemProvider(this);
		}

		return integerTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.BooleanT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanTItemProvider booleanTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.BooleanT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanTAdapter() {
		if (booleanTItemProvider == null) {
			booleanTItemProvider = new BooleanTItemProvider(this);
		}

		return booleanTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.FloatT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatTItemProvider floatTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.FloatT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatTAdapter() {
		if (floatTItemProvider == null) {
			floatTItemProvider = new FloatTItemProvider(this);
		}

		return floatTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.StringT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringTItemProvider stringTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.StringT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringTAdapter() {
		if (stringTItemProvider == null) {
			stringTItemProvider = new StringTItemProvider(this);
		}

		return stringTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.CharT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharTItemProvider charTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.CharT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharTAdapter() {
		if (charTItemProvider == null) {
			charTItemProvider = new CharTItemProvider(this);
		}

		return charTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.LongT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongTItemProvider longTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.LongT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLongTAdapter() {
		if (longTItemProvider == null) {
			longTItemProvider = new LongTItemProvider(this);
		}

		return longTItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ajiMLT.DateT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTItemProvider dateTItemProvider;

	/**
	 * This creates an adapter for a {@link ajiMLT.DateT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTAdapter() {
		if (dateTItemProvider == null) {
			dateTItemProvider = new DateTItemProvider(this);
		}

		return dateTItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (functionalServiceTItemProvider != null) functionalServiceTItemProvider.dispose();
		if (discoveryServiceTItemProvider != null) discoveryServiceTItemProvider.dispose();
		if (apiServiceTItemProvider != null) apiServiceTItemProvider.dispose();
		if (configurationServiceTItemProvider != null) configurationServiceTItemProvider.dispose();
		if (securityServiceTItemProvider != null) securityServiceTItemProvider.dispose();
		if (serviceInterfaceTItemProvider != null) serviceInterfaceTItemProvider.dispose();
		if (userManagementServiceTItemProvider != null) userManagementServiceTItemProvider.dispose();
		if (systemTItemProvider != null) systemTItemProvider.dispose();
		if (dataModelTItemProvider != null) dataModelTItemProvider.dispose();
		if (entityTItemProvider != null) entityTItemProvider.dispose();
		if (relationTItemProvider != null) relationTItemProvider.dispose();
		if (createTItemProvider != null) createTItemProvider.dispose();
		if (readTItemProvider != null) readTItemProvider.dispose();
		if (updateTItemProvider != null) updateTItemProvider.dispose();
		if (deleteTItemProvider != null) deleteTItemProvider.dispose();
		if (multiReadTItemProvider != null) multiReadTItemProvider.dispose();
		if (customTItemProvider != null) customTItemProvider.dispose();
		if (integerTItemProvider != null) integerTItemProvider.dispose();
		if (booleanTItemProvider != null) booleanTItemProvider.dispose();
		if (floatTItemProvider != null) floatTItemProvider.dispose();
		if (stringTItemProvider != null) stringTItemProvider.dispose();
		if (charTItemProvider != null) charTItemProvider.dispose();
		if (longTItemProvider != null) longTItemProvider.dispose();
		if (dateTItemProvider != null) dateTItemProvider.dispose();
	}

}
