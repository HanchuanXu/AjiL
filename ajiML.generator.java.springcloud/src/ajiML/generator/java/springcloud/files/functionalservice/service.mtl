[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module service('http://www.fh-dortmund.de/idial/ajiML/tech')]
[template public importService(aFunctionalService : ajiMLT::FunctionalServiceT, aServiceInterface : ajiMLT::ServiceInterfaceT)]
[file (aFunctionalService.name+ '/src/main/java/de/fh/service/' + aServiceInterface.name.toUpperFirst() + 'Service.java', false, 'UTF-8')]
package de.fh.service;

import de.fh.entity.*;

public interface [aServiceInterface.name.toUpperFirst()/]Service {

[for (aCreate : ajiMLT::CreateT | aServiceInterface.eAllContents(ajiMLT::CreateT))]
  public [aCreate.subject.name.toUpperFirst()/] create[aCreate.subject.name.toUpperFirst()/]([aCreate.subject.name.toUpperFirst()/] [aCreate.subject.name.toLowerFirst()/]);
[/for]
[for (aUpdate : ajiMLT::UpdateT | aServiceInterface.eAllContents(ajiMLT::UpdateT))]
  public [aUpdate.subject.name.toUpperFirst()/] update[aUpdate.subject.name.toUpperFirst()/]([aUpdate.subject.name.toUpperFirst()/] [aUpdate.subject.name.toLowerFirst()/]);
[/for]
[for (aRead : ajiMLT::ReadT | aServiceInterface.eAllContents(ajiMLT::ReadT))]
  public [aRead.subject.name.toUpperFirst()/] read[aRead.subject.name.toUpperFirst()/](int Id);
[/for]
[for (aDelete : ajiMLT::DeleteT | aServiceInterface.eAllContents(ajiMLT::DeleteT))]
  public void delete[aDelete.subject.name.toUpperFirst()/]([aDelete.subject.name.toUpperFirst()/] [aDelete.subject.name.toLowerFirst()/]);
[/for]

}
[/file]

[file (aFunctionalService.name+ '/src/main/java/de/fh/service/impl/' + aServiceInterface.name.toUpperFirst() + 'ServiceImpl.java', false, 'UTF-8')]
package de.fh.service.impl;

import de.fh.dao.*;
import de.fh.entity.*;
import de.fh.service.[aServiceInterface.name.toUpperFirst()/]Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class [aServiceInterface.name.toUpperFirst()/]ServiceImpl implements [aServiceInterface.name.toUpperFirst()/]Service {

[for (aEntityService : ajiMLT::EntityT | aFunctionalService.eAllContents(ajiMLT::EntityT))]
	[for (aRead : ajiMLT::ReadT | aServiceInterface.eAllContents(ajiMLT::ReadT))]
		[if (aEntityService.name.equalsIgnoreCase(aRead.subject.name))]
  private [aEntityService.name.toUpperFirst()/]Dao [aEntityService.name.toLowerFirst()/]Dao;
		[/if]
	[/for]
[/for]

  public [aServiceInterface.name.toUpperFirst()/]ServiceImpl() {
  }

[for (aEntityService : ajiMLT::EntityT | aFunctionalService.eAllContents(ajiMLT::EntityT))]
	[for (aRead : ajiMLT::ReadT | aServiceInterface.eAllContents(ajiMLT::ReadT))]
		[if (aEntityService.name.equalsIgnoreCase(aRead.subject.name))]
  @Autowired
  public void set[aEntityService.name.toUpperFirst()/]Dao([aEntityService.name.toUpperFirst()/]Dao [aEntityService.name.toLowerFirst()/]Dao) {
    this.[aEntityService.name.toLowerFirst()/]Dao = [aEntityService.name.toLowerFirst()/]Dao;
  }
		[/if]
	[/for]
[/for]

[for (aCreate : ajiMLT::CreateT | aServiceInterface.eAllContents(ajiMLT::CreateT))]
  @Override
  public [aCreate.subject.name.toUpperFirst()/] create[aCreate.subject.name.toUpperFirst()/]([aCreate.subject.name.toUpperFirst()/] [aCreate.subject.name.toLowerFirst()/]) {
    [aCreate.subject.name.toLowerFirst()/]Dao.save([aCreate.subject.name.toLowerFirst()/]);
    return [aCreate.subject.name.toLowerFirst()/]Dao.findById([aCreate.subject.name.toLowerFirst()/].getId());
  }
[/for]

[for (aRead : ajiMLT::ReadT | aServiceInterface.eAllContents(ajiMLT::ReadT))]
  @Override
  public [aRead.subject.name.toUpperFirst()/] read[aRead.subject.name.toUpperFirst()/](int Id) {
    return [aRead.subject.name.toLowerFirst()/]Dao.findById(Id);
  }
[/for]

[for (aUpdate : ajiMLT::UpdateT | aServiceInterface.eAllContents(ajiMLT::UpdateT))]
  @Override
  public [aUpdate.subject.name.toUpperFirst()/] update[aUpdate.subject.name.toUpperFirst()/]([aUpdate.subject.name.toUpperFirst()/] [aUpdate.subject.name.toLowerFirst()/]) {
    [aUpdate.subject.name.toLowerFirst()/]Dao.save([aUpdate.subject.name.toLowerFirst()/]);
    return [aUpdate.subject.name.toLowerFirst()/]Dao.findById([aUpdate.subject.name.toLowerFirst()/].getId());
  }
[/for]

[for (aDelete : ajiMLT::DeleteT | aServiceInterface.eAllContents(ajiMLT::DeleteT))]
  @Override
  public void delete[aDelete.subject.name.toUpperFirst()/]([aDelete.subject.name.toUpperFirst()/] [aDelete.subject.name.toLowerFirst()/]) {
    [aDelete.subject.name.toLowerFirst()/]Dao.delete([aDelete.subject.name.toLowerFirst()/]);
  }
[/for]
}
[/file]
[/template]