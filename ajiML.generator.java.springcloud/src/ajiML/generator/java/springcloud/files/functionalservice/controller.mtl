[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module controller('http://www.fh-dortmund.de/idial/ajiML/tech')]
[template public importController(aFunctionalService : ajiMLT::FunctionalServiceT, aServiceInterface : ajiMLT::ServiceInterfaceT)]
[file (aFunctionalService.name+ '/src/main/java/de/fh/controller/' + aServiceInterface.name.toUpperFirst() + 'RestController.java', false, 'UTF-8')]
package de.fh.controller;

import com.google.gson.Gson;
import de.fh.entity.*;
import de.fh.service.*;
import java.security.InvalidParameterException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(value = "/resources/[aServiceInterface.name.toLowerCase()/]", produces = "application/json")
public class [aServiceInterface.name.toUpperFirst()/]RestController {

  private [aServiceInterface.name.toUpperFirst()/]Service [aServiceInterface.name.toLowerFirst()/]Service;

  @Autowired
  public [aServiceInterface.name.toUpperFirst()/]RestController([aServiceInterface.name.toUpperFirst()/]Service [aServiceInterface.name.toLowerFirst()/]Service) {
    this.[aServiceInterface.name.toLowerFirst()/]Service = [aServiceInterface.name.toLowerFirst()/]Service;
  }

 [for (aCreate : ajiMLT::CreateT | aServiceInterface.eAllContents(ajiMLT::CreateT))]
  @PutMapping("/[aCreate.name.toLowerCase()/]")
  public String create[aCreate.subject.name.toUpperFirst()/](
		[for (aString : ajiMLT::StringT | aCreate.subject.eAllContents(ajiMLT::StringT))]
		  			@RequestParam String [aString.name.toLowerFirst()/],
		[/for]
		[for (aInteger : ajiMLT::IntegerT | aCreate.subject.eAllContents(ajiMLT::IntegerT))]
		   			@RequestParam int [aInteger.name.toLowerFirst()/],
		[/for]
		[for (aBoolean : ajiMLT::BooleanT | aCreate.subject.eAllContents(ajiMLT::BooleanT))]
		   			@RequestParam boolean [aBoolean.name.toLowerFirst()/],
		[/for]
		[for (aChar : ajiMLT::CharT | aCreate.subject.eAllContents(ajiMLT::CharT))]
		   			@RequestParam String [aChar.name.toLowerFirst()/],
		[/for]
		[for (aFloat : ajiMLT::FloatT | aCreate.subject.eAllContents(ajiMLT::FloatT))]
		  	 		@RequestParam float [aFloat.name.toLowerFirst()/],
		[/for]
					 @RequestParam String Id) {
    [aCreate.subject.name.toUpperFirst()/] [aCreate.subject.name.toLowerFirst()/] = new [aCreate.subject.name.toUpperFirst()/](
		[for (aString : ajiMLT::StringT | aCreate.subject.eAllContents(ajiMLT::StringT))]
		  			[aString.name.toLowerFirst()/],
		[/for]
		[for (aInteger : ajiMLT::IntegerT | aCreate.subject.eAllContents(ajiMLT::IntegerT))]
		   			[aInteger.name.toLowerFirst()/],
		[/for]
		[for (aBoolean : ajiMLT::BooleanT | aCreate.subject.eAllContents(ajiMLT::BooleanT))]
		   			[aBoolean.name.toLowerFirst()/],
		[/for]
		[for (aChar : ajiMLT::CharT | aCreate.subject.eAllContents(ajiMLT::CharT))]
		   			[aChar.name.toLowerFirst()/],
		[/for]
		[for (aFloat : ajiMLT::FloatT | aCreate.subject.eAllContents(ajiMLT::FloatT))]
		  	 		[aFloat.name.toLowerFirst()/],
		[/for]
					  Integer.parseInt(Id));
    [aCreate.subject.name.toLowerFirst()/] = [aServiceInterface.name.toLowerFirst()/]Service.create[aCreate.subject.name.toUpperFirst()/]([aCreate.subject.name.toLowerFirst()/]);
    Gson gson = new Gson();
    return gson.toJson([aCreate.subject.name.toLowerFirst()/]);
  }

 [/for]
[for (aRead : ajiMLT::ReadT | aServiceInterface.eAllContents(ajiMLT::ReadT))]
  @GetMapping("/[aRead.name.toLowerCase()/]/{Id}")
  public String read[aRead.subject.name.toUpperFirst()/](@PathVariable String Id) {
    Gson gson = new Gson();
	[aRead.subject.name.toUpperFirst()/] [aRead.subject.name.toLowerFirst()/] = [aServiceInterface.name.toLowerFirst()/]Service.read[aRead.subject.name.toUpperFirst()/](Integer.parseInt(Id));
    if ([aRead.subject.name.toLowerFirst()/] == null) {
      throw new InvalidParameterException("No [aRead.subject.name.toUpperFirst()/] with Id: " + Id);
    }
    return gson.toJson([aRead.subject.name.toLowerFirst()/]);
  }	

[/for]
[for (aUpdate : ajiMLT::UpdateT | aServiceInterface.eAllContents(ajiMLT::UpdateT))]
  @PostMapping("/[aUpdate.name.toLowerCase()/]")
  public String update[aUpdate.subject.name.toUpperFirst()/](
	[for (aString : ajiMLT::StringT | aUpdate.subject.eAllContents(ajiMLT::StringT))]
	  			@RequestParam String [aString.name.toLowerFirst()/],
	[/for]
	[for (aInteger : ajiMLT::IntegerT | aUpdate.subject.eAllContents(ajiMLT::IntegerT))]
	   			@RequestParam int [aInteger.name.toLowerFirst()/],
	[/for]
	[for (aBoolean : ajiMLT::BooleanT | aUpdate.subject.eAllContents(ajiMLT::BooleanT))]
	   			@RequestParam boolean [aBoolean.name.toLowerFirst()/],
	[/for]
	[for (aChar : ajiMLT::CharT | aUpdate.subject.eAllContents(ajiMLT::CharT))]
	   			@RequestParam String [aChar.name.toLowerFirst()/],
	[/for]
	[for (aFloat : ajiMLT::FloatT | aUpdate.subject.eAllContents(ajiMLT::FloatT))]
	  	 		@RequestParam float [aFloat.name.toLowerFirst()/],
	[/for]
				 @RequestParam String Id) {
	  [aUpdate.subject.name/] [aUpdate.subject.name.toLowerFirst()/] = new [aUpdate.subject.name.toUpperFirst()/](
	[for (aString : ajiMLT::StringT | aUpdate.subject.eAllContents(ajiMLT::StringT))]
	  			[aString.name.toLowerFirst()/],
	[/for]
	[for (aInteger : ajiMLT::IntegerT | aUpdate.subject.eAllContents(ajiMLT::IntegerT))]
	   			[aInteger.name.toLowerFirst()/],
	[/for]
	[for (aBoolean : ajiMLT::BooleanT | aUpdate.subject.eAllContents(ajiMLT::BooleanT))]
	   			[aBoolean.name.toLowerFirst()/],
	[/for]
	[for (aChar : ajiMLT::CharT | aUpdate.subject.eAllContents(ajiMLT::CharT))]
	   			[aChar.name.toLowerFirst()/],
	[/for]
	[for (aFloat : ajiMLT::FloatT | aUpdate.subject.eAllContents(ajiMLT::FloatT))]
	  	 		[aFloat.name.toLowerFirst()/],
	[/for]
					  Integer.parseInt(Id));
	[aUpdate.subject.name.toLowerFirst()/] = [aServiceInterface.name.toLowerFirst()/]Service.update[aUpdate.subject.name.toUpperFirst()/]([aUpdate.subject.name.toLowerFirst()/]);
	Gson gson = new Gson();
	return gson.toJson([aUpdate.subject.name.toLowerFirst()/]);
	}

[/for]
[for (aDelete : ajiMLT::DeleteT | aServiceInterface.eAllContents(ajiMLT::DeleteT))]
  @DeleteMapping("/[aDelete.name.toLowerCase()/]/{Id}")
  public String delete[aDelete.subject.name.toUpperFirst()/](@PathVariable String Id) {
  	[aDelete.subject.name.toUpperFirst()/] [aDelete.subject.name.toLowerFirst()/] = [aServiceInterface.name.toLowerFirst()/]Service.read[aDelete.subject.name.toUpperFirst()/](Integer.parseInt(Id));
	Gson gson = new Gson();
	if ([aDelete.subject.name.toLowerFirst()/] != null) {
      [aServiceInterface.name.toLowerFirst()/]Service.delete[aDelete.subject.name.toUpperFirst()/]([aDelete.subject.name.toLowerFirst()/]);
      return gson.toJson([aDelete.subject.name.toLowerFirst()/]);
    } else
      throw new InvalidParameterException("No LocationInterface with Id: " + Id);
  }

[/for]
}

[/file]
[/template]