[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module main('http://www.fh-dortmund.de/idial/ajiML/tech')]
[template public importMain(aAPIService : ajiMLT::APIServiceT)]
[file (aAPIService.name + '/src/main/java/de/fhdortmund/service/gateway/GatewayApplication.java', false, 'UTF-8')]
package de.fhdortmund.service.gateway;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;

@SpringBootApplication
@EnableZuulProxy
@EnableOAuth2Sso
@EnableDiscoveryClient
@EnableEurekaClient
public class GatewayApplication extends WebSecurityConfigurerAdapter {

  public static void main(String[ '[' /][ ']' /] args) {
    SpringApplication.run(GatewayApplication.class, args);
  }

  @Override
  public void configure(HttpSecurity httpSecurity) throws Exception {
    httpSecurity
        .logout().and()
        .authorizeRequests()
        .antMatchers("/index.html", "/home.html", "/", "/login").permitAll()
        .anyRequest().authenticated()
        .and()
        .csrf()
        .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());
  }
}
[/file]
[/template]