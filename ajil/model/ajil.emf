@"http://www.eclipse.org/OCL/Import"(ecore="http://www.eclipse.org/emf/2002/Ecore")
@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http://www.example.org/ajil", prefix="ajil")
package ajil;
import "http://www.eclipse.org/emf/2002/Ecore";
enum ECommunicationMechanism {
  RESTfulHTTP = 0;
  PublishSubscribe = 1;
}
enum EMultiplicity {
  ONE = 0;
  MANY = 1;
}
abstract class Multiplicity {
  attr EMultiplicity[1] multiplicity;
}
class System {
  attr ecore.EString[1] name = "mySystem";
  val Microservice[*] services;
}
@Ecore(constraints="uniqueServiceName uniqueServicePort")
@"http://www.eclipse.org/emf/2002/Ecore/OCL"(uniqueServiceName="Microservice.allInstances()->forAll(s : Microservice | s <> self implies s.name <> self.name)"
, uniqueServicePort="Microservice.allInstances()->forAll(p : Microservice | p <> self implies p.port <> self.port)")
abstract class Microservice {
  attr ecore.EString[1] name = "myService";
  attr ecore.EInt[1] port = 8888;
  attr ecore.EBoolean[1]  loadBalanced = true;
  attr ecore.EBoolean[1] circuitBreaker = true;
}

abstract class InfrastructureService extends Microservice {
}

@Ecore(constraints="noSelfDependency")
@"http://www.eclipse.org/emf/2002/Ecore/OCL"(noSelfDependency="self.serviceDependencies->forAll(i : ServiceInterface | self.providedInterfaces->excludes(i))")
class FunctionalService extends Microservice {
  val DomainModel[1]#owner domain;
  val ServiceInterface[+]#owner providedInterfaces;
  ref ServiceInterface[*] serviceDependencies;
  ref DiscoveryService[0..1]#knownFunctionalServices discoveredBy;
  ref ConfigurationService[0..1]#storedConfigurations configuredBy;
}

class DiscoveryService extends InfrastructureService {
	ref FunctionalService[*]#discoveredBy knownFunctionalServices;
	ref APIService[*]#discoveredBy knownApiServices;
	ref ConfigurationService[*]#discoveredBy knownConfigurationServices;		 
}

class APIService extends InfrastructureService {
  ref ServiceInterface[*]#exposedToGateways exposedServices;
  ref DiscoveryService[0..1]#knownApiServices discoveredBy;
}

class ConfigurationService extends InfrastructureService {
  ref DiscoveryService[0..1]#knownConfigurationServices discoveredBy;
  ref FunctionalService[0..1]#configuredBy storedConfigurations;
}

@Ecore(constraints="uniqueInterfaceName")
@"http://www.eclipse.org/emf/2002/Ecore/OCL"(uniqueInterfaceName="ServiceInterface.allInstances()->forAll(s : ServiceInterface | s <> self implies s.name <> self.name)")
class ServiceInterface {
  attr ecore.EString[1] name = "myInterface";
  attr ECommunicationMechanism[1] mechanism;
  attr ecore.EInt[1] version = 1;  
  val Ability[*]#owner abilities;
  readonly ref APIService[*]#exposedServices exposedToGateways;
  readonly transient ref FunctionalService[1]#providedInterfaces owner;
}

@Ecore(constraints="uniqueDomainName")
@"http://www.eclipse.org/emf/2002/Ecore/OCL"(uniqueDomainName="DomainModel.allInstances()->forAll(d : DomainModel | d <> self implies d.name <> self.name)")
class DomainModel {
  attr ecore.EString[1] name = "myDomainModel";
  val Entity[*]#domainModel entities;
  readonly ref FunctionalService[1]#domain owner;
}

@Ecore(constraints="sealedDomainInheritance uniqueEntityName")
@"http://www.eclipse.org/emf/2002/Ecore/OCL"(sealedDomainInheritance="if self.parent.oclIsUndefined() then true else if self.parent.domainModel = self.domainModel then true else false 
endif endif", uniqueEntityName="Entity.allInstances()->forAll(ent : Entity | ent <> self implies ent.name <> self.name)")
class Entity {
  attr ecore.EString[1] name = "myEntity";
  ref Entity[0..1] parent;
  val PrimitiveDataType[*] attributes;
  val Relation[*]#source relations;
  attr ecore.EBoolean[1] persistent = true;
  readonly transient ref DomainModel[1]#entities domainModel;
}

@Ecore(constraints="sealedDomain noSelfRelation")
@"http://www.eclipse.org/emf/2002/Ecore/OCL"(sealedDomain="self.source.domainModel = self.target.domainModel", noSelfRelation="self.source <> self.target")
class Relation extends Multiplicity {
  attr ecore.EString name = "myRelation";
  readonly ref Entity[1]#relations source;
  ref Entity[1] target;
}

@Ecore(constraints="uniqueCapabilityName")
@"http://www.eclipse.org/emf/2002/Ecore/OCL"(uniqueCapabilityName="Ability.allInstances()->forAll(a : Ability | a <> self implies a.name <> self.name)")
abstract class Ability {
  attr ecore.EString[1] name;
  readonly transient ref ServiceInterface[1]#abilities owner;
}

class Create extends Ability {
  ref Entity[1] subject;
}

class Read extends Ability {
  ref Entity[1] subject;
}

class MultiRead extends Ability {
  ref Entity[1] subject;
}

class Update extends Ability {
  ref Entity[1] subject;
}

class Delete extends Ability {
  ref Entity[1] subject;
}

class Custom extends Ability {
}

abstract class PrimitiveDataType {
}

class Integer extends PrimitiveDataType {
 attr ecore.EString[1] name = "myInteger";
 readonly attr ecore.EString[1] type = "Integer";
}

class Boolean extends PrimitiveDataType {
  attr ecore.EString[1] name = "myBoolean";
  readonly attr ecore.EString[1] type = "Boolean";
}

class Float extends PrimitiveDataType {
  attr ecore.EString[1] name = "myFloat";
  readonly attr ecore.EString[1] type = "Float";
}

class String extends PrimitiveDataType {
  attr ecore.EString[1] name = "myString";
  readonly attr ecore.EString[1] type = "String";
}
class Char extends PrimitiveDataType {
  attr ecore.EString[1] name = "myChar";
  readonly attr ecore.EString[1] type = "Char";
}

