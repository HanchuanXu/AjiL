[% out.setContentType("Java");%]
package [%=package_interface%];

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import  [%=package_entity%].*;
import  [%=package_repository%].*;
/**
 * A RESTFul controller implementing the [%=interface.name%] interface.
 * 
 * @author Jonas Sorgalla
 */
@RestController
public class [%=interface.name.firstToUpperCase()%]Controller {
	protected Logger logger = Logger.getLogger([%=interface.name.firstToUpperCase()%]Controller.class.getName());
	[%
	for(entity in domain.entities) {%]
	protected [%=entity.name.firstToUpperCase()%]Repository [%=entity.name.toLowerCase()%]Repository;
	[%
	}
	%]

	@Autowired
	public [%=interface.name.firstToUpperCase()%]Controller() {
	[%
	var entityList : OrderedSet;
	for(ability in interface.abilities) {
		entityList.add(ability.subject);
	}
	for(entity in entityList) {
		%]
		this.[%=entity.name.toLowerCase()%]Repository = [%=entity.name.firstToUpperCase()%]Repository.getInstance();
		[%
	}
	%]
	}
	[%
	for (ability in interface.abilities) {
	var classname : String = ability.eClass().getName();
	if(classname = "Create") {%]
	@RequestMapping(method = RequestMethod.POST, value = "/[%=ability.subject.name.toLowerCase()%]")
	public [%=ability.subject.name.firstToUpperCase()%] [%=ability.name.firstToLowerCase()%]() {
		return this.[%=ability.subject.name.toLowerCase()%]Repository.create();
	}
	[%}
	if(classname = "Read") {%]
	@RequestMapping(method = RequestMethod.GET, value = "/[%=ability.subject.name.toLowerCase()%]/{id}")
	public [%=ability.subject.name.firstToUpperCase()%] [%=ability.name.firstToLowerCase()%](@PathVariable("id") String id) {
	[%=ability.subject.name.firstToUpperCase()%] [%=ability.subject.name.toLowerCase()%] = this.[%=ability.subject.name.toLowerCase()%]Repository.read(id);
	if ([%=ability.subject.name.toLowerCase()%] == null) {
		return null;
	} else {
		return [%=ability.subject.name.toLowerCase()%];
		}
	}
	[%}
	 if(classname = "Update") {%]
	@RequestMapping(method = RequestMethod.PUT, value = "/[%=ability.subject.name.toLowerCase()%]")
	public [%=ability.subject.name.firstToUpperCase()%] [%=ability.name.firstToLowerCase()%](@RequestBody [%=ability.subject.name.firstToUpperCase()%] [%=ability.subject.name.firstToLowerCase()%]) {
	[%=ability.subject.name.firstToUpperCase()%] result = null;
	if([%=ability.subject.name.firstToLowerCase()%].getId() != null) {
		result = this.[%=ability.subject.name.toLowerCase()%]Repository.update([%=ability.subject.name.firstToLowerCase()%]);
	}
		return result;
	}
	  	[%}	  		  	
	if(classname = "Delete") {%]
	@RequestMapping(method = RequestMethod.DELETE, value = "/[%=ability.subject.name.toLowerCase()%]/{id}")
	public [%=ability.subject.name.firstToUpperCase()%] [%=ability.name.firstToLowerCase()%](@PathVariable("id") String id) {
	[%=ability.subject.name.firstToUpperCase()%] [%=ability.subject.name.toLowerCase()%] = this.[%=ability.subject.name.toLowerCase()%]Repository.delete(id);
	return [%=ability.subject.name.toLowerCase()%]; 
	}
	[%}
	if(classname = "MultiRead") {%]
	@RequestMapping(method = RequestMethod.GET, value = "/[%=ability.subject.name.toLowerCase()%]")
	public List<[%=ability.subject.name.firstToUpperCase()%]> [%=ability.name.firstToLowerCase()%]() {
	ArrayList<[%=ability.subject.name.firstToUpperCase()%]> [%=ability.subject.name.toLowerCase()%]List = new ArrayList<[%=ability.subject.name.firstToUpperCase()%]>();
	[%=ability.subject.name.toLowerCase()%]List = this.[%=ability.subject.name.toLowerCase()%]Repository.readAll();
	if ([%=ability.subject.name.toLowerCase()%]List.size() > 0)
		return [%=ability.subject.name.toLowerCase()%]List;
	else {
		return null;
	}
	}
	[%}
	if(classname = "Custom") {%]
	//Please add the code for your custom function [%=ability.name.toLowerCase()%] here!
	@RequestMapping(method = RequestMethod.GET, value = "/[%=ability.name.toLowerCase()%]")
	public void [%=ability.name.firstToLowerCase()%]() {
	//do something.
	}
	[%}
	}
	%]
}